#include "classRandom.hpp"

/********************//********************//********************//********************//********************/
/********************//********************//********************//********************//********************/

classRandom::classRandom(){
  init();
};

/********************//********************//********************//********************//********************/
/********************//********************//********************//********************//********************/

classRandom::~classRandom(){
  gfGauss_.clear();
};

/********************//********************//********************//********************//********************/
/********************//********************//********************//********************//********************/

void classRandom::init(){
  srand(time(0));
  initGeneratingFunctions();
  return ;
}

/********************//********************//********************//********************//********************/
/********************//********************//********************//********************//********************/

void classRandom::initGeneratingFunctions(){

  initGFGauss();
  
  return ;
}


/********************//********************//********************//********************//********************/
/********************//********************//********************//********************//********************/

void classRandom::initGFGauss(){

  const double dx = 2. * defaultValue::gfGaussRange / defaultValue::gfGaussPrecision;
  
  for(double x=-defaultValue::gfGaussRange; x<=defaultValue::gfGaussRange; x+=dx){
    gfGauss_.push_back(pair<double, double>(erf(x), x));
  }
  
  return ;
}

/********************//********************//********************//********************//********************/
/********************//********************//********************//********************//********************/

double classRandom::getGaussian(const double randomNumber) const{
  for(unsigned int i=0; i<gfGauss_.size()-1; i++){
    if(randomNumber > gfGauss_[i].first && randomNumber < gfGauss_[i+1].first) return gfGauss_[i].second;
  }
  return 0.;
}

/********************//********************//********************//********************//********************/
/********************//********************//********************//********************//********************/

double classRandom::generateRandomUniform(const double rangeMin,
					  const double rangeMax){
  return rangeMin + (rangeMax - rangeMin) * (1. * rand() / RAND_MAX);
}

/********************//********************//********************//********************//********************/
/********************//********************//********************//********************//********************/

double classRandom::generateRandomGauss(const double mu,
					const double sigma){
  return mu + getGaussian(1. * rand() / RAND_MAX) * sigma;
}
